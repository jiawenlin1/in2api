{"uid":"f34749d4a644af4f","name":"查询数据(变量触发聚合表)","fullName":"testcase.5_DataManagement.test_data_run.TestCreat#test_query_data_aggregate_table_var_trigger","historyId":"02726a0082a7a33fc4eef24d1a93293f","time":{"start":1721799565617,"stop":1721799565691,"duration":74},"description":"查询数据(变量触发聚合表)","descriptionHtml":"<p>查询数据(变量触发聚合表)</p>\n","status":"broken","statusMessage":"Exception: 分析YAML文件异常：异常信息: Traceback (most recent call last):\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 448, in validate_result\n    error_log(\"断言失败:\" + assert_key + \"不大于\" + str(assert_value))\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\n    raise Exception(log_message)\nException: 断言失败:G1不大于1\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 248, in analysis_yaml\n    self.validate_result(yq_result, return_data, status_code)\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 481, in validate_result\n    error_log(\"断言异常：异常信息: %s\" % str(traceback.format_exc()))\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\n    raise Exception(log_message)\nException: 断言异常：异常信息: Traceback (most recent call last):\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 448, in validate_result\n    error_log(\"断言失败:\" + assert_key + \"不大于\" + str(assert_value))\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\n    raise Exception(log_message)\nException: 断言失败:G1不大于1","statusTrace":"self = <common.requests_util.RequestUtil object at 0x000002C12CAC9760>\nyq_result = [{'equals': {'status_code': 200}}, {'equals': {'COUNT1': 2}}, {'equals': {'COUNTA1': 2}}, {'equals': {'差值3年': 3}}, {'equals': {'差值5月': 5}}, {'equals': {'差值177天': 177}}, ...]\nsj_result = [{'A1': 22.0, 'ABS1': 154.912, 'AND1': '0', 'AVERAGE1': 88.456, ...}, {'A1': 209.0, 'ABS1': 1471.664, 'AND1': '0', 'AVERAGE1': 840.332, ...}]\nstatus_code = 200\n\n    def validate_result(self,yq_result,sj_result,status_code):\n        try:\n            \"\"\"\n            :param yq_result: 预期结果\n            :param sj_result: 实际结果\n            :param status_code: 实际返回的状态码\n            :return:\n            \"\"\"\n            #解析\n            yq_result = self.replace_load(yq_result)\n    \n            yq_result_list = []\n            #断言是否成功的标记：0是成功，其他失败\n            # print('预期结果：',yq_result)\n            # print('实际结果：',sj_result,status_code)\n            flag = 0\n            #解析\n            if yq_result and isinstance(yq_result,list):\n                # print(\"预期结果：\",yq_result)\n                for yq in yq_result:\n                    #断言参数解析\n                    yq = self.replace_load(yq)\n                    for key,value in dict(yq).items():\n                        #等于断言\n                        if key=='equals':\n                            for assert_key,assert_value in dict(value).items():\n                                # print(\"=====assert_key:\",assert_key,\"assert_value:\",assert_value,\"status_code: \",status_code)\n                                if assert_key==\"status_code\":\n                                    if status_code != assert_value:\n                                        flag = flag + 1\n                                        error_log(\"断言失败:\"+assert_key+\"不等于\"+str(assert_value))\n                                elif assert_key == \"content\":\n                                    if sj_result != assert_value:\n                                        flag = flag + 1\n                                        error_log(\"断言失败:\" + assert_key + \"不等于\" + str(assert_value))\n                                else:\n                                    #根据key提取所有value\n                                    value_list = jsonpath.jsonpath(sj_result,'$..%s'%assert_key)\n                                    # print(\"实际结果key_list:\",value_list)\n                                    # print(\"预期结果assert_value:\", assert_value)\n                                    if value_list:\n                                        if assert_value not in value_list:\n                                            flag + flag+1\n                                            error_log(\"断言失败:\" + assert_key + \"不等于\" + str(assert_value))\n                                    else:\n                                        flag = flag+1\n                                        error_log(\"断言失败：返回结果中不存在：\"+assert_key)\n                        elif key=='not_equals':\n                            for assert_key,assert_value in dict(value).items():\n                                # print(\"assert_key:\",assert_key,\"assert_value:\",assert_value)\n                                if assert_key==\"status_code\":\n                                    if status_code==assert_value:\n                                        flag = flag + 1\n                                        error_log(\"断言失败:\"+assert_key+\"等于\"+str(assert_value))\n                                elif assert_key == \"content\":\n                                    if sj_result == assert_value:\n                                        flag = flag + 1\n                                        error_log(\"断言失败:\" + assert_key + \"等于\" + str(assert_value))\n                                else:\n                                    #根据key提取所有value\n                                    value_list = jsonpath.jsonpath(sj_result,'$..%s'%assert_key)\n                                    # print(\"实际结果key_list:\",value_list)\n                                    # print(\"预期结果assert_value:\", assert_value)\n                                    if value_list:\n                                        if assert_value in value_list:\n                                            flag + flag+1\n                                            error_log(\"断言失败:\" + assert_key + \"等于\" + str(assert_value))\n                                    else:\n                                        flag = flag+1\n                                        error_log(\"断言失败：返回结果中存在：\"+assert_key)\n                        #包含断言\n                        elif key==\"contains\":\n                            if isinstance(sj_result,str):\n                                if value not in sj_result:\n                                    flag = flag + 1\n                                    error_log(\"断言失败：返回结果不包含字符串：\" + value)\n                            else:\n                                if value not in json.dumps(sj_result):\n                                    flag = flag + 1\n                                    error_log(\"断言失败：返回结果不包含字符串：\" + value)\n                        elif key==\"not_contain\":\n                            if isinstance(sj_result,str):\n                                if value in sj_result:\n                                    flag = flag + 1\n                                    error_log(\"断言失败：返回结果包含字符串：\" + value)\n                            else:\n                                if value in json.dumps(sj_result):\n                                    flag = flag + 1\n                                    error_log(\"断言失败：返回结果包含字符串：\" + value)\n                        #数据库断言\n                        elif key == \"mysql\":\n                            for assert_key, assert_value in dict(value).items():\n                                if assert_key==\"gt\":\n                                    data = MysqlrUtil().sql(assert_value)\n                                    if len(data)==0:\n                                        flag = flag + 1\n                                        error_log(\"断言失败:\"+assert_key+\"不等于\"+str(assert_value))\n    \n                        #数值大于\n                        elif key == \"greater_than\":\n                            for assert_key, assert_value in dict(value).items():\n                                key_list = jsonpath.jsonpath(sj_result, '$..%s' % assert_key)\n                                # print(\"key_list:\",key_list)\n                                # print(\"实际结果key_list:\",key_list,type(key_list[0]))\n                                # print(\"预期结果assert_value:\", assert_value,type(assert_value))\n                                #取列表中第一条数据进行判断\n                                if key_list:\n                                    if assert_value > key_list[0]:\n                                        flag + flag + 1\n>                                       error_log(\"断言失败:\" + assert_key + \"不大于\" + str(assert_value))\n\ncommon\\requests_util.py:448: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlog_message = '断言失败:G1不大于1'\n\n    def error_log(log_message):\n        LoggerUtil().creat_log().info(log_message)\n>       raise Exception(log_message)\nE       Exception: 断言失败:G1不大于1\n\ncommon\\logger_util.py:66: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <common.requests_util.RequestUtil object at 0x000002C12CAC9760>\ncaseinfo = {'base_url': '${get_base_url(cms_url)}', 'name': '查询数据(变量触发聚合表)', 'request': {'json': {'dataSetId': '${get_extract_dat...: 2}}, {'equals': {'COUNTA1': 2}}, {'equals': {'差值3年': 3}}, {'equals': {'差值5月': 5}}, {'equals': {'差值177天': 177}}, ...]}\n\n        def analysis_yaml(self, caseinfo: object) -> object:\n            # print(\"==========caseinfo:\",caseinfo)\n            try:\n                # 1.必须有的四个一级关键字：name,base_url,request,validate\n                caseinfo_keys = dict(caseinfo).keys()\n                if 'name' in caseinfo_keys and 'base_url' in caseinfo_keys and 'request' in caseinfo_keys and 'validate' in caseinfo_keys:\n                    # 2.在request一级关键字下必须包括两个二级关键字：method，url\n                    request_keys = dict(caseinfo['request']).keys()\n                    if 'method' in request_keys and 'url' in request_keys:\n                        # 参数(param,data,json)，请求头，文件上传这些都不能约束\n                        self.base_url = caseinfo['base_url']\n                        name = caseinfo['name']\n                        method = caseinfo['request'].pop('method')\n                        # url = caseinfo['request']['url']\n                        url = caseinfo['request'].pop('url')\n                        headers = None\n                        if jsonpath.jsonpath(caseinfo, '$..headers'):\n                            headers = caseinfo['request']['headers']\n                            del caseinfo['request']['headers']\n    \n                        files = None\n                        if jsonpath.jsonpath(caseinfo, '$..files'):\n                            files = caseinfo['request']['files']\n                            for key,value in dict(files).items():\n                                files_value = self.replace_load(value)\n                                files[key] = open(files_value,'rb')\n                            del caseinfo['request']['files']\n                        res = self.send_request(name =name,method=method,\n                                                url=url,\n                                                headers=headers, files=files,\n                                                **caseinfo['request'])\n    \n    # '----------------------------------------------------------------------------'\n                        status_code = res.status_code\n                        try:\n                            return_data = res.json()  # json提取\n                            return_text = json.dumps(return_data)\n                        except:\n                            self.res_fomat = 1\n    \n                        # 接口关联的变量,既支持正则表达式，也支持json提取\n                        if self.res_fomat == 0:\n                            return_data = res.json()  # json提取\n                            return_text = json.dumps(return_data)\n                            if 'extract' in caseinfo:\n                                for key, value in dict(caseinfo['extract']).items():\n                                    # 正则表达式\n                                    if '(.+?)' in value or '(.*?)' in value:\n                                        ze_value = re.findall(value, return_text)\n                                        if ze_value:\n                                            extract_data = {key: ze_value[1]}\n                                            write_extract_file(extract_data)\n    \n                                    elif value == \"content\":\n                                        if isinstance(return_data,list):\n                                            extract_data = {key: return_data[0]}\n                                            write_extract_file(extract_data)\n                                        elif isinstance(return_data,dict):\n                                            extract_data = {key: return_data}\n                                            write_extract_file(extract_data)\n                                        else:\n                                            extract_data = {key: return_data}\n                                            write_extract_file(extract_data)\n                                    # json、list提取\n                                    else:\n                                        if isinstance(return_data, list):\n                                            value_data = str(value).split('.')\n                                            key_data = value_data[0]\n                                            value_data = int(value_data[1])\n                                            extract_data = {key: return_data[value_data][key_data]}\n                                            write_extract_file(extract_data)\n                                        elif isinstance(return_data, dict):\n                                            if \".\"  in str(value):\n                                                # 仅针对key加索引类型,如：originalId.0\n                                                key_list = str(value).split('.')\n                                                value1 = key_list[0]\n                                                value2 = int(key_list[1])\n                                                value_list = jsonpath.jsonpath(return_data, '$..%s' % value1)\n                                                extract_data = {key: value_list[value2]}\n                                                write_extract_file(extract_data)\n                                            else:\n                                                value_data = jsonpath.jsonpath(return_data, '$..%s' % value)\n                                                # print(\"++++++++++++:\",value_data)\n                                                extract_data = {key: value_data[0]}\n                                                write_extract_file(extract_data)\n    \n    \n                            # 断言封装\n                            yq_result = caseinfo['validate']\n                            # print(\"实际结果：\",return_data)\n>                           self.validate_result(yq_result, return_data, status_code)\n\ncommon\\requests_util.py:248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\requests_util.py:481: in validate_result\n    error_log(\"断言异常：异常信息: %s\" % str(traceback.format_exc()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlog_message = '断言异常：异常信息: Traceback (most recent call last):\\n  File \"D:\\\\CMS2.0_API\\\\EOS_API_AUTOMATION_TEST\\\\common\\\\requests_util...ATION_TEST\\\\common\\\\logger_util.py\", line 66, in error_log\\n    raise Exception(log_message)\\nException: 断言失败:G1不大于1\\n'\n\n    def error_log(log_message):\n        LoggerUtil().creat_log().info(log_message)\n>       raise Exception(log_message)\nE       Exception: 断言异常：异常信息: Traceback (most recent call last):\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 448, in validate_result\nE           error_log(\"断言失败:\" + assert_key + \"不大于\" + str(assert_value))\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言失败:G1不大于1\n\ncommon\\logger_util.py:66: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_data_run.TestCreat object at 0x000002C12BCB0940>\ncaseinfo = {'base_url': '${get_base_url(cms_url)}', 'name': '查询数据(变量触发聚合表)', 'request': {'json': {'dataSetId': '${get_extract_dat...: 2}}, {'equals': {'COUNTA1': 2}}, {'equals': {'差值3年': 3}}, {'equals': {'差值5月': 5}}, {'equals': {'差值177天': 177}}, ...]}\n\n    @allure.story(\"接口名称：查询数据(变量触发聚合表)\")\n    @pytest.mark.parametrize('caseinfo', read_testcase_file('/testcase/5_DataManagement/query_data(aggregate_table_var_trigger).yml'))\n    def test_query_data_aggregate_table_var_trigger(self, caseinfo):\n        allure.dynamic.title(caseinfo['name'])\n        allure.dynamic.description(caseinfo['name'])\n>       RequestUtil().analysis_yaml(caseinfo)\n\ntestcase\\5_DataManagement\\test_data_run.py:443: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\requests_util.py:273: in analysis_yaml\n    error_log(\"分析YAML文件异常：异常信息: %s\" % str(traceback.format_exc()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlog_message = '分析YAML文件异常：异常信息: Traceback (most recent call last):\\n  File \"D:\\\\CMS2.0_API\\\\EOS_API_AUTOMATION_TEST\\\\common\\\\request...ION_TEST\\\\common\\\\logger_util.py\", line 66, in error_log\\n    raise Exception(log_message)\\nException: 断言失败:G1不大于1\\n\\n'\n\n    def error_log(log_message):\n        LoggerUtil().creat_log().info(log_message)\n>       raise Exception(log_message)\nE       Exception: 分析YAML文件异常：异常信息: Traceback (most recent call last):\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 448, in validate_result\nE           error_log(\"断言失败:\" + assert_key + \"不大于\" + str(assert_value))\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言失败:G1不大于1\nE       \nE       During handling of the above exception, another exception occurred:\nE       \nE       Traceback (most recent call last):\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 248, in analysis_yaml\nE           self.validate_result(yq_result, return_data, status_code)\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 481, in validate_result\nE           error_log(\"断言异常：异常信息: %s\" % str(traceback.format_exc()))\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言异常：异常信息: Traceback (most recent call last):\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 448, in validate_result\nE           error_log(\"断言失败:\" + assert_key + \"不大于\" + str(assert_value))\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言失败:G1不大于1\n\ncommon\\logger_util.py:66: Exception","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"clear_extract","time":{"start":1721798845155,"stop":1721798845156,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"查询数据(变量触发聚合表)","status":"broken","statusMessage":"Exception: 分析YAML文件异常：异常信息: Traceback (most recent call last):\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 448, in validate_result\n    error_log(\"断言失败:\" + assert_key + \"不大于\" + str(assert_value))\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\n    raise Exception(log_message)\nException: 断言失败:G1不大于1\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 248, in analysis_yaml\n    self.validate_result(yq_result, return_data, status_code)\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 481, in validate_result\n    error_log(\"断言异常：异常信息: %s\" % str(traceback.format_exc()))\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\n    raise Exception(log_message)\nException: 断言异常：异常信息: Traceback (most recent call last):\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 448, in validate_result\n    error_log(\"断言失败:\" + assert_key + \"不大于\" + str(assert_value))\n  File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\n    raise Exception(log_message)\nException: 断言失败:G1不大于1","statusTrace":"self = <common.requests_util.RequestUtil object at 0x000002C12CAC9760>\nyq_result = [{'equals': {'status_code': 200}}, {'equals': {'COUNT1': 2}}, {'equals': {'COUNTA1': 2}}, {'equals': {'差值3年': 3}}, {'equals': {'差值5月': 5}}, {'equals': {'差值177天': 177}}, ...]\nsj_result = [{'A1': 22.0, 'ABS1': 154.912, 'AND1': '0', 'AVERAGE1': 88.456, ...}, {'A1': 209.0, 'ABS1': 1471.664, 'AND1': '0', 'AVERAGE1': 840.332, ...}]\nstatus_code = 200\n\n    def validate_result(self,yq_result,sj_result,status_code):\n        try:\n            \"\"\"\n            :param yq_result: 预期结果\n            :param sj_result: 实际结果\n            :param status_code: 实际返回的状态码\n            :return:\n            \"\"\"\n            #解析\n            yq_result = self.replace_load(yq_result)\n    \n            yq_result_list = []\n            #断言是否成功的标记：0是成功，其他失败\n            # print('预期结果：',yq_result)\n            # print('实际结果：',sj_result,status_code)\n            flag = 0\n            #解析\n            if yq_result and isinstance(yq_result,list):\n                # print(\"预期结果：\",yq_result)\n                for yq in yq_result:\n                    #断言参数解析\n                    yq = self.replace_load(yq)\n                    for key,value in dict(yq).items():\n                        #等于断言\n                        if key=='equals':\n                            for assert_key,assert_value in dict(value).items():\n                                # print(\"=====assert_key:\",assert_key,\"assert_value:\",assert_value,\"status_code: \",status_code)\n                                if assert_key==\"status_code\":\n                                    if status_code != assert_value:\n                                        flag = flag + 1\n                                        error_log(\"断言失败:\"+assert_key+\"不等于\"+str(assert_value))\n                                elif assert_key == \"content\":\n                                    if sj_result != assert_value:\n                                        flag = flag + 1\n                                        error_log(\"断言失败:\" + assert_key + \"不等于\" + str(assert_value))\n                                else:\n                                    #根据key提取所有value\n                                    value_list = jsonpath.jsonpath(sj_result,'$..%s'%assert_key)\n                                    # print(\"实际结果key_list:\",value_list)\n                                    # print(\"预期结果assert_value:\", assert_value)\n                                    if value_list:\n                                        if assert_value not in value_list:\n                                            flag + flag+1\n                                            error_log(\"断言失败:\" + assert_key + \"不等于\" + str(assert_value))\n                                    else:\n                                        flag = flag+1\n                                        error_log(\"断言失败：返回结果中不存在：\"+assert_key)\n                        elif key=='not_equals':\n                            for assert_key,assert_value in dict(value).items():\n                                # print(\"assert_key:\",assert_key,\"assert_value:\",assert_value)\n                                if assert_key==\"status_code\":\n                                    if status_code==assert_value:\n                                        flag = flag + 1\n                                        error_log(\"断言失败:\"+assert_key+\"等于\"+str(assert_value))\n                                elif assert_key == \"content\":\n                                    if sj_result == assert_value:\n                                        flag = flag + 1\n                                        error_log(\"断言失败:\" + assert_key + \"等于\" + str(assert_value))\n                                else:\n                                    #根据key提取所有value\n                                    value_list = jsonpath.jsonpath(sj_result,'$..%s'%assert_key)\n                                    # print(\"实际结果key_list:\",value_list)\n                                    # print(\"预期结果assert_value:\", assert_value)\n                                    if value_list:\n                                        if assert_value in value_list:\n                                            flag + flag+1\n                                            error_log(\"断言失败:\" + assert_key + \"等于\" + str(assert_value))\n                                    else:\n                                        flag = flag+1\n                                        error_log(\"断言失败：返回结果中存在：\"+assert_key)\n                        #包含断言\n                        elif key==\"contains\":\n                            if isinstance(sj_result,str):\n                                if value not in sj_result:\n                                    flag = flag + 1\n                                    error_log(\"断言失败：返回结果不包含字符串：\" + value)\n                            else:\n                                if value not in json.dumps(sj_result):\n                                    flag = flag + 1\n                                    error_log(\"断言失败：返回结果不包含字符串：\" + value)\n                        elif key==\"not_contain\":\n                            if isinstance(sj_result,str):\n                                if value in sj_result:\n                                    flag = flag + 1\n                                    error_log(\"断言失败：返回结果包含字符串：\" + value)\n                            else:\n                                if value in json.dumps(sj_result):\n                                    flag = flag + 1\n                                    error_log(\"断言失败：返回结果包含字符串：\" + value)\n                        #数据库断言\n                        elif key == \"mysql\":\n                            for assert_key, assert_value in dict(value).items():\n                                if assert_key==\"gt\":\n                                    data = MysqlrUtil().sql(assert_value)\n                                    if len(data)==0:\n                                        flag = flag + 1\n                                        error_log(\"断言失败:\"+assert_key+\"不等于\"+str(assert_value))\n    \n                        #数值大于\n                        elif key == \"greater_than\":\n                            for assert_key, assert_value in dict(value).items():\n                                key_list = jsonpath.jsonpath(sj_result, '$..%s' % assert_key)\n                                # print(\"key_list:\",key_list)\n                                # print(\"实际结果key_list:\",key_list,type(key_list[0]))\n                                # print(\"预期结果assert_value:\", assert_value,type(assert_value))\n                                #取列表中第一条数据进行判断\n                                if key_list:\n                                    if assert_value > key_list[0]:\n                                        flag + flag + 1\n>                                       error_log(\"断言失败:\" + assert_key + \"不大于\" + str(assert_value))\n\ncommon\\requests_util.py:448: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlog_message = '断言失败:G1不大于1'\n\n    def error_log(log_message):\n        LoggerUtil().creat_log().info(log_message)\n>       raise Exception(log_message)\nE       Exception: 断言失败:G1不大于1\n\ncommon\\logger_util.py:66: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <common.requests_util.RequestUtil object at 0x000002C12CAC9760>\ncaseinfo = {'base_url': '${get_base_url(cms_url)}', 'name': '查询数据(变量触发聚合表)', 'request': {'json': {'dataSetId': '${get_extract_dat...: 2}}, {'equals': {'COUNTA1': 2}}, {'equals': {'差值3年': 3}}, {'equals': {'差值5月': 5}}, {'equals': {'差值177天': 177}}, ...]}\n\n        def analysis_yaml(self, caseinfo: object) -> object:\n            # print(\"==========caseinfo:\",caseinfo)\n            try:\n                # 1.必须有的四个一级关键字：name,base_url,request,validate\n                caseinfo_keys = dict(caseinfo).keys()\n                if 'name' in caseinfo_keys and 'base_url' in caseinfo_keys and 'request' in caseinfo_keys and 'validate' in caseinfo_keys:\n                    # 2.在request一级关键字下必须包括两个二级关键字：method，url\n                    request_keys = dict(caseinfo['request']).keys()\n                    if 'method' in request_keys and 'url' in request_keys:\n                        # 参数(param,data,json)，请求头，文件上传这些都不能约束\n                        self.base_url = caseinfo['base_url']\n                        name = caseinfo['name']\n                        method = caseinfo['request'].pop('method')\n                        # url = caseinfo['request']['url']\n                        url = caseinfo['request'].pop('url')\n                        headers = None\n                        if jsonpath.jsonpath(caseinfo, '$..headers'):\n                            headers = caseinfo['request']['headers']\n                            del caseinfo['request']['headers']\n    \n                        files = None\n                        if jsonpath.jsonpath(caseinfo, '$..files'):\n                            files = caseinfo['request']['files']\n                            for key,value in dict(files).items():\n                                files_value = self.replace_load(value)\n                                files[key] = open(files_value,'rb')\n                            del caseinfo['request']['files']\n                        res = self.send_request(name =name,method=method,\n                                                url=url,\n                                                headers=headers, files=files,\n                                                **caseinfo['request'])\n    \n    # '----------------------------------------------------------------------------'\n                        status_code = res.status_code\n                        try:\n                            return_data = res.json()  # json提取\n                            return_text = json.dumps(return_data)\n                        except:\n                            self.res_fomat = 1\n    \n                        # 接口关联的变量,既支持正则表达式，也支持json提取\n                        if self.res_fomat == 0:\n                            return_data = res.json()  # json提取\n                            return_text = json.dumps(return_data)\n                            if 'extract' in caseinfo:\n                                for key, value in dict(caseinfo['extract']).items():\n                                    # 正则表达式\n                                    if '(.+?)' in value or '(.*?)' in value:\n                                        ze_value = re.findall(value, return_text)\n                                        if ze_value:\n                                            extract_data = {key: ze_value[1]}\n                                            write_extract_file(extract_data)\n    \n                                    elif value == \"content\":\n                                        if isinstance(return_data,list):\n                                            extract_data = {key: return_data[0]}\n                                            write_extract_file(extract_data)\n                                        elif isinstance(return_data,dict):\n                                            extract_data = {key: return_data}\n                                            write_extract_file(extract_data)\n                                        else:\n                                            extract_data = {key: return_data}\n                                            write_extract_file(extract_data)\n                                    # json、list提取\n                                    else:\n                                        if isinstance(return_data, list):\n                                            value_data = str(value).split('.')\n                                            key_data = value_data[0]\n                                            value_data = int(value_data[1])\n                                            extract_data = {key: return_data[value_data][key_data]}\n                                            write_extract_file(extract_data)\n                                        elif isinstance(return_data, dict):\n                                            if \".\"  in str(value):\n                                                # 仅针对key加索引类型,如：originalId.0\n                                                key_list = str(value).split('.')\n                                                value1 = key_list[0]\n                                                value2 = int(key_list[1])\n                                                value_list = jsonpath.jsonpath(return_data, '$..%s' % value1)\n                                                extract_data = {key: value_list[value2]}\n                                                write_extract_file(extract_data)\n                                            else:\n                                                value_data = jsonpath.jsonpath(return_data, '$..%s' % value)\n                                                # print(\"++++++++++++:\",value_data)\n                                                extract_data = {key: value_data[0]}\n                                                write_extract_file(extract_data)\n    \n    \n                            # 断言封装\n                            yq_result = caseinfo['validate']\n                            # print(\"实际结果：\",return_data)\n>                           self.validate_result(yq_result, return_data, status_code)\n\ncommon\\requests_util.py:248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\requests_util.py:481: in validate_result\n    error_log(\"断言异常：异常信息: %s\" % str(traceback.format_exc()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlog_message = '断言异常：异常信息: Traceback (most recent call last):\\n  File \"D:\\\\CMS2.0_API\\\\EOS_API_AUTOMATION_TEST\\\\common\\\\requests_util...ATION_TEST\\\\common\\\\logger_util.py\", line 66, in error_log\\n    raise Exception(log_message)\\nException: 断言失败:G1不大于1\\n'\n\n    def error_log(log_message):\n        LoggerUtil().creat_log().info(log_message)\n>       raise Exception(log_message)\nE       Exception: 断言异常：异常信息: Traceback (most recent call last):\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 448, in validate_result\nE           error_log(\"断言失败:\" + assert_key + \"不大于\" + str(assert_value))\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言失败:G1不大于1\n\ncommon\\logger_util.py:66: Exception\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_data_run.TestCreat object at 0x000002C12BCB0940>\ncaseinfo = {'base_url': '${get_base_url(cms_url)}', 'name': '查询数据(变量触发聚合表)', 'request': {'json': {'dataSetId': '${get_extract_dat...: 2}}, {'equals': {'COUNTA1': 2}}, {'equals': {'差值3年': 3}}, {'equals': {'差值5月': 5}}, {'equals': {'差值177天': 177}}, ...]}\n\n    @allure.story(\"接口名称：查询数据(变量触发聚合表)\")\n    @pytest.mark.parametrize('caseinfo', read_testcase_file('/testcase/5_DataManagement/query_data(aggregate_table_var_trigger).yml'))\n    def test_query_data_aggregate_table_var_trigger(self, caseinfo):\n        allure.dynamic.title(caseinfo['name'])\n        allure.dynamic.description(caseinfo['name'])\n>       RequestUtil().analysis_yaml(caseinfo)\n\ntestcase\\5_DataManagement\\test_data_run.py:443: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\requests_util.py:273: in analysis_yaml\n    error_log(\"分析YAML文件异常：异常信息: %s\" % str(traceback.format_exc()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlog_message = '分析YAML文件异常：异常信息: Traceback (most recent call last):\\n  File \"D:\\\\CMS2.0_API\\\\EOS_API_AUTOMATION_TEST\\\\common\\\\request...ION_TEST\\\\common\\\\logger_util.py\", line 66, in error_log\\n    raise Exception(log_message)\\nException: 断言失败:G1不大于1\\n\\n'\n\n    def error_log(log_message):\n        LoggerUtil().creat_log().info(log_message)\n>       raise Exception(log_message)\nE       Exception: 分析YAML文件异常：异常信息: Traceback (most recent call last):\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 448, in validate_result\nE           error_log(\"断言失败:\" + assert_key + \"不大于\" + str(assert_value))\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言失败:G1不大于1\nE       \nE       During handling of the above exception, another exception occurred:\nE       \nE       Traceback (most recent call last):\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 248, in analysis_yaml\nE           self.validate_result(yq_result, return_data, status_code)\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 481, in validate_result\nE           error_log(\"断言异常：异常信息: %s\" % str(traceback.format_exc()))\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言异常：异常信息: Traceback (most recent call last):\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\requests_util.py\", line 448, in validate_result\nE           error_log(\"断言失败:\" + assert_key + \"不大于\" + str(assert_value))\nE         File \"D:\\CMS2.0_API\\EOS_API_AUTOMATION_TEST\\common\\logger_util.py\", line 66, in error_log\nE           raise Exception(log_message)\nE       Exception: 断言失败:G1不大于1\n\ncommon\\logger_util.py:66: Exception","steps":[],"attachments":[{"uid":"9063b2ac0c9fcc0c","name":"log","source":"9063b2ac0c9fcc0c.txt","type":"text/plain","size":12185}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"story","value":"接口名称：查询数据(变量触发聚合表)"},{"name":"feature","value":"数据管理"},{"name":"epic","value":"CMS2.0"},{"name":"parentSuite","value":"testcase.5_DataManagement"},{"name":"suite","value":"test_data_run"},{"name":"subSuite","value":"TestCreat"},{"name":"host","value":"DESKTOP-V6TD7H4"},{"name":"thread","value":"16476-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.5_DataManagement.test_data_run"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"caseinfo","value":"{'name': '查询数据(变量触发聚合表)', 'base_url': '${get_base_url(cms_url)}', 'request': {'url': '/api/v1/data/original', 'method': 'post', 'json': {'dataSetId': '${get_extract_data(Aggregation_Table_var_Trigger_ID)}', 'tableName': '变量触发聚合表', 'limit': 500}, 'headers': {'Content-Type': 'application/json;charset=UTF-8', 'X-Project': '${get_extract_data(x_project)}'}}, 'validate': [{'equals': {'status_code': 200}}, {'equals': {'COUNT1': 2}}, {'equals': {'COUNTA1': 2}}, {'equals': {'差值3年': 3}}, {'equals': {'差值5月': 5}}, {'equals': {'差值177天': 177}}, {'equals': {'差值4249时': 4249}}, {'equals': {'差值254955分': 254955}}, {'equals': {'差值15297325秒': 15297325}}, {'equals': {'DATE1': '2023-06-19 00:00:00'}}, {'equals': {'DAYS1': '18'}}, {'equals': {'H1': 'Abcf'}}, {'equals': {'CHAR1': '\\\\'}}, {'equals': {'CONCATENATE1': 'Abcf123'}}, {'equals': {'LEFT2': 'Ab'}}, {'equals': {'LEN1': '4'}}, {'equals': {'LOWER1': 'abcf'}}, {'equals': {'MID12': 'Ab'}}, {'equals': {'REPLACE1': '替换cf'}}, {'equals': {'RIGHT1': 'cf'}}, {'equals': {'TODATE1': '2023-06-19 00:00:00'}}, {'equals': {'TRIM1': 'Abcf'}}, {'equals': {'UPPER1': 'ABCF'}}, {'equals': {'去空格后长度': '4'}}, {'equals': {'AND1': '0'}}, {'equals': {'FALSE1': '0'}}, {'equals': {'TRUE1': '1'}}, {'equals': {'IF1': '及格'}}, {'equals': {'NOT_true1': '0'}}, {'equals': {'NOT_false1': '1'}}, {'equals': {'OR1': '0'}}, {'greater_than': {'A1': 10}}, {'greater_than': {'B1': 10}}, {'greater_than': {'G1': 1}}, {'greater_than': {'ROUND1': 10}}, {'greater_than': {'ROUNDUP1': 10}}, {'greater_than': {'ROUNDDOWN1': 10}}, {'greater_than': {'SUM1': 10}}, {'greater_than': {'AVERAGE1': 10}}, {'greater_than': {'MAX1': 10}}, {'greater_than': {'MEDIAN1': 10}}, {'greater_than': {'MIN1': 10}}, {'greater_than': {'ABS1': 10}}, {'greater_than': {'max_B1': 10}}, {'greater_than': {'min_B1': 10}}, {'length_greater_than': {'HOUR1': 0}}, {'length_greater_than': {'MINUTE1': 0}}, {'length_greater_than': {'MONTH1': 0}}, {'length_greater_than': {'NOW1': 0}}, {'length_greater_than': {'SECOND1': 0}}, {'length_greater_than': {'YEAR1': 0}}, {'length_greater_than': {'系统时间': 0}}, {'length_greater_than': {'DATE1': 0}}, {'length_greater_than': {'TODAY1': 0}}]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"f34749d4a644af4f.json","parameterValues":["{'name': '查询数据(变量触发聚合表)', 'base_url': '${get_base_url(cms_url)}', 'request': {'url': '/api/v1/data/original', 'method': 'post', 'json': {'dataSetId': '${get_extract_data(Aggregation_Table_var_Trigger_ID)}', 'tableName': '变量触发聚合表', 'limit': 500}, 'headers': {'Content-Type': 'application/json;charset=UTF-8', 'X-Project': '${get_extract_data(x_project)}'}}, 'validate': [{'equals': {'status_code': 200}}, {'equals': {'COUNT1': 2}}, {'equals': {'COUNTA1': 2}}, {'equals': {'差值3年': 3}}, {'equals': {'差值5月': 5}}, {'equals': {'差值177天': 177}}, {'equals': {'差值4249时': 4249}}, {'equals': {'差值254955分': 254955}}, {'equals': {'差值15297325秒': 15297325}}, {'equals': {'DATE1': '2023-06-19 00:00:00'}}, {'equals': {'DAYS1': '18'}}, {'equals': {'H1': 'Abcf'}}, {'equals': {'CHAR1': '\\\\'}}, {'equals': {'CONCATENATE1': 'Abcf123'}}, {'equals': {'LEFT2': 'Ab'}}, {'equals': {'LEN1': '4'}}, {'equals': {'LOWER1': 'abcf'}}, {'equals': {'MID12': 'Ab'}}, {'equals': {'REPLACE1': '替换cf'}}, {'equals': {'RIGHT1': 'cf'}}, {'equals': {'TODATE1': '2023-06-19 00:00:00'}}, {'equals': {'TRIM1': 'Abcf'}}, {'equals': {'UPPER1': 'ABCF'}}, {'equals': {'去空格后长度': '4'}}, {'equals': {'AND1': '0'}}, {'equals': {'FALSE1': '0'}}, {'equals': {'TRUE1': '1'}}, {'equals': {'IF1': '及格'}}, {'equals': {'NOT_true1': '0'}}, {'equals': {'NOT_false1': '1'}}, {'equals': {'OR1': '0'}}, {'greater_than': {'A1': 10}}, {'greater_than': {'B1': 10}}, {'greater_than': {'G1': 1}}, {'greater_than': {'ROUND1': 10}}, {'greater_than': {'ROUNDUP1': 10}}, {'greater_than': {'ROUNDDOWN1': 10}}, {'greater_than': {'SUM1': 10}}, {'greater_than': {'AVERAGE1': 10}}, {'greater_than': {'MAX1': 10}}, {'greater_than': {'MEDIAN1': 10}}, {'greater_than': {'MIN1': 10}}, {'greater_than': {'ABS1': 10}}, {'greater_than': {'max_B1': 10}}, {'greater_than': {'min_B1': 10}}, {'length_greater_than': {'HOUR1': 0}}, {'length_greater_than': {'MINUTE1': 0}}, {'length_greater_than': {'MONTH1': 0}}, {'length_greater_than': {'NOW1': 0}}, {'length_greater_than': {'SECOND1': 0}}, {'length_greater_than': {'YEAR1': 0}}, {'length_greater_than': {'系统时间': 0}}, {'length_greater_than': {'DATE1': 0}}, {'length_greater_than': {'TODAY1': 0}}]}"]}